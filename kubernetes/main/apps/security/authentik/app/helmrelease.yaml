---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app authentik
spec:
  interval: 30m
  chart:
    spec:
      chart: authentik
      version: 2024.10.4
      sourceRef:
        kind: HelmRepository
        name: authentik
        namespace: flux-system
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      strategy: rollback
      retries: 3
  values:
    global:
      fullnameOverride: authentik
      deploymentAnnotations:
        secret.reloader.stakater.com/reload: authentik-secret
      podLabels:
        talos.roxedus.net/maddy: "true"
      image:
        repository: ghcr.io/goauthentik/server
        tag: 2024.10.4
      envFrom:
        - secretRef:
            name: &authSec authentik-secret
    authentik:
      log_level: info
      avatars: gravatar,initials
      email:
        host: maddy.network.svc.${CLUSTER_DOMAIN}
        port: 2525
        use_tls: false
      error_reporting:
        enable: false
        send_pii: false
      outposts:
        container_image_base: ghcr.io/goauthentik/%(type)s:%(version)s

    geoip:
      enabled: false
      existingSecret:
        secretName: *authSec
        accountId: MAXMIND_ACCOUNT_ID
        licenseKey: MAXMIND_LICENSE_KEY

    server:
      replicas: 2
      initContainers:
        - name: init-db
          image: ghcr.io/onedr0p/postgres-init:16.3
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: *authSec
      pdb:
        enabled: true
        minAvailable: 1
        maxUnavailable: 1
      ingress:
        enabled: true
        ingressClassName: external
        annotations:
        hosts:
          - &host auth.${CLUSTER_INGRESS}
        paths:
          - /
        tls:
          - hosts: [*host]
      metrics:
        serviceMonitor:
          enabled: ${KPS_ENABLED}
      # resources:
      #   requests:
      #     cpu: 100m
      #     memory: 50Mi
      #   limits:
      #     memory: 2Gi
    worker:
      replicas: 2
      pdb:
        enabled: true
        minAvailable: 1
        maxUnavailable: 1
      # resources:
      #   requests:
      #     cpu: 50m
      #     memory: 50Mi
      #   limits:
      #     memory: 1Gi
    prometheus:
      rules:
        enabled: ${KPS_ENABLED}

    postgresql:
      enabled: false
    redis:
      enabled: false
